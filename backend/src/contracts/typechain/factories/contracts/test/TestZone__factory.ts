/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestZone,
  TestZoneInterface,
} from "../../../contracts/test/TestZone";

const _abi = [
  {
    inputs: [],
    name: "getSeaportMetadata",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct Schema[]",
        name: "schemas",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "fulfiller",
            type: "address",
          },
          {
            internalType: "address",
            name: "offerer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct SpentItem[]",
            name: "offer",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address payable",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct ReceivedItem[]",
            name: "consideration",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "orderHashes",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "zoneHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ZoneParameters",
        name: "zoneParameters",
        type: "tuple",
      },
    ],
    name: "validateOrder",
    outputs: [
      {
        internalType: "bytes4",
        name: "validOrderMagicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806317b1f9421461003b5780632e778efc1461006c575b600080fd5b61004e6100493660046103e4565b610082565b6040516001600160e01b031990911681526020015b60405180910390f35b61007461031c565b60405161006392919061046d565b600061009160a08301836104f1565b905060000361010557600019610120830135016100ed5760405162461bcd60e51b8152602060048201526015602482015274526576657274206f6e207a6f6e652068617368203160581b60448201526064015b60405180910390fd5b6001196101208301350161010057600080fd5b6102f1565b61011260a08301836104f1565b90506004036101635760405162461bcd60e51b815260206004820152601c60248201527f526576657274206f6e20657874726144617461206c656e67746820340000000060448201526064016100e4565b61017060a08301836104f1565b905060050361017e57600080fd5b602061018d60a08401846104f1565b90501180156101b3575060206101a660a08401846104f1565b6101b192915061053f565b155b156102f15760006101c760a08401846104f1565b8101906101d49190610577565b80519091506101e660c0850185610635565b905081146102475760405162461bcd60e51b815260206004820152602860248201527f526576657274206f6e20756e6578706563746564206f726465722068617368656044820152670e640d8cadccee8d60c31b60648201526084016100e4565b60005b818110156102ed5761025f60c0860186610635565b8281811061026f5761026f61067f565b905060200201358382815181106102885761028861067f565b6020026020010151146102dd5760405162461bcd60e51b815260206004820152601f60248201527f526576657274206f6e20756e6578706563746564206f7264657220686173680060448201526064016100e4565b6102e681610695565b905061024a565b5050505b6002196101208301350161030d576001600160e01b0319610316565b630bd8fca160e11b5b92915050565b604080516001808252818301909252606091829190816020015b604080518082019091526000815260606020820152815260200190600190039081610336579050509050610bbb816000815181106103765761037661067f565b602090810291909101810151919091526040805160008082529281019091529050816000815181106103aa576103aa61067f565b6020026020010151602001819052508060405180604001604052806008815260200167546573745a6f6e6560c01b81525090915091509091565b6000602082840312156103f657600080fd5b813567ffffffffffffffff81111561040d57600080fd5b8201610140818503121561042057600080fd5b9392505050565b6000815180845260005b8181101561044d57602081850181015186830182015201610431565b506000602082860101526020601f19601f83011685010191505092915050565b6000604080835261048081840186610427565b6020848203818601528186518084528284019150828160051b85010183890160005b838110156104e157868303601f190185528151805184528601518684018990526104ce89850182610427565b95870195935050908501906001016104a2565b50909a9950505050505050505050565b6000808335601e1984360301811261050857600080fd5b83018035915067ffffffffffffffff82111561052357600080fd5b60200191503681900382131561053857600080fd5b9250929050565b60008261055c57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561058a57600080fd5b823567ffffffffffffffff808211156105a257600080fd5b818501915085601f8301126105b657600080fd5b8135818111156105c8576105c8610561565b8060051b604051601f19603f830116810181811085821117156105ed576105ed610561565b60405291825284820192508381018501918883111561060b57600080fd5b938501935b8285101561062957843584529385019392850192610610565b98975050505050505050565b6000808335601e1984360301811261064c57600080fd5b83018035915067ffffffffffffffff82111561066757600080fd5b6020019150600581901b360382131561053857600080fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016106b557634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220adb9b61d40ed2ff2db291a2ea8cc7cb7bc113652cf8cf725d6a219b8fe35dbd164736f6c63430008110033";

type TestZoneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestZoneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestZone__factory extends ContractFactory {
  constructor(...args: TestZoneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestZone> {
    return super.deploy(overrides || {}) as Promise<TestZone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestZone {
    return super.attach(address) as TestZone;
  }
  override connect(signer: Signer): TestZone__factory {
    return super.connect(signer) as TestZone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestZoneInterface {
    return new utils.Interface(_abi) as TestZoneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestZone {
    return new Contract(address, _abi, signerOrProvider) as TestZone;
  }
}
