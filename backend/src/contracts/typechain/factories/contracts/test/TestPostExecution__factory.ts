/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestPostExecution,
  TestPostExecutionInterface,
} from "../../../contracts/test/TestPostExecution";

const _abi = [
  {
    inputs: [],
    name: "getSeaportMetadata",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct Schema[]",
        name: "schemas",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "fulfiller",
            type: "address",
          },
          {
            internalType: "address",
            name: "offerer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct SpentItem[]",
            name: "offer",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "enum ItemType",
                name: "itemType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "identifier",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address payable",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct ReceivedItem[]",
            name: "consideration",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
          {
            internalType: "bytes32[]",
            name: "orderHashes",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "zoneHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ZoneParameters",
        name: "zoneParameters",
        type: "tuple",
      },
    ],
    name: "validateOrder",
    outputs: [
      {
        internalType: "bytes4",
        name: "validOrderMagicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806317b1f9421461003b5780632e778efc1461006c575b600080fd5b61004e610049366004610442565b610082565b6040516001600160e01b031990911681526020015b60405180910390f35b610074610371565b6040516100639291906104cb565b6000610091608083018361054f565b90506000036100e75760405162461bcd60e51b815260206004820152601f60248201527f4e6f20636f6e73696465726174696f6e206974656d7320737570706c6965640060448201526064015b60405180910390fd5b60006100f6608084018461054f565b60008181106101075761010761059f565b905060a0020180360381019061011d91906105dd565b9050600081602001516001600160a01b0316636352211e83604001516040518263ffffffff1660e01b815260040161015791815260200190565b602060405180830381865afa925050508015610190575060408051601f3d908101601f1916820190925261018d91810190610671565b60015b6102025760405162461bcd60e51b815260206004820152603960248201527f556e737570706f7274656420636f6e73696465726174696f6e20746f6b656e2060448201527f7479706520286d75737420696d706c656d656e7420373231290000000000000060648201526084016100de565b90506002825160058111156102195761021961068e565b146102825760405162461bcd60e51b815260206004820152603360248201527f56616c696469747920636865636b20706572666f726d6564207769746820756e604482015272737570706f72746564206974656d207479706560681b60648201526084016100de565b81606001516001146102e85760405162461bcd60e51b815260206004820152602960248201527f52657475726e6564206974656d20616d6f756e7420696e636f72726563746c79604482015268081b5bd91a599a595960ba1b60648201526084016100de565b81608001516001600160a01b0316816001600160a01b0316146103615760405162461bcd60e51b815260206004820152602b60248201527f56616c696469747920636865636b20706572666f726d6564207072696f72207460448201526a379032bc32b1baba34b7b760a91b60648201526084016100de565b50630bd8fca160e11b9392505050565b604080516001808252818301909252606091829190816020015b60408051808201909152600081526060602082015281526020019060019003908161038b579050509050610bbb816000815181106103cb576103cb61059f565b602090810291909101810151919091526040805160008082529281019091529050816000815181106103ff576103ff61059f565b60200260200101516020018190525080604051806040016040528060118152602001702a32b9ba2837b9ba22bc32b1baba34b7b760791b81525090915091509091565b60006020828403121561045457600080fd5b813567ffffffffffffffff81111561046b57600080fd5b8201610140818503121561047e57600080fd5b9392505050565b6000815180845260005b818110156104ab5760208185018101518683018201520161048f565b506000602082860101526020601f19601f83011685010191505092915050565b600060408083526104de81840186610485565b6020848203818601528186518084528284019150828160051b85010183890160005b8381101561053f57868303601f1901855281518051845286015186840189905261052c89850182610485565b9587019593505090850190600101610500565b50909a9950505050505050505050565b6000808335601e1984360301811261056657600080fd5b83018035915067ffffffffffffffff82111561058157600080fd5b602001915060a08102360382131561059857600080fd5b9250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146105ca57600080fd5b50565b80356105d8816105b5565b919050565b600060a082840312156105ef57600080fd5b60405160a0810181811067ffffffffffffffff8211171561062057634e487b7160e01b600052604160045260246000fd5b60405282356006811061063257600080fd5b8152610640602084016105cd565b60208201526040830135604082015260608301356060820152610665608084016105cd565b60808201529392505050565b60006020828403121561068357600080fd5b815161047e816105b5565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220bc381a609f6d0952986c3b9f512ba1648e20d37e544b7778529ff81691a01cca64736f6c63430008110033";

type TestPostExecutionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPostExecutionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPostExecution__factory extends ContractFactory {
  constructor(...args: TestPostExecutionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestPostExecution> {
    return super.deploy(overrides || {}) as Promise<TestPostExecution>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestPostExecution {
    return super.attach(address) as TestPostExecution;
  }
  override connect(signer: Signer): TestPostExecution__factory {
    return super.connect(signer) as TestPostExecution__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPostExecutionInterface {
    return new utils.Interface(_abi) as TestPostExecutionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPostExecution {
    return new Contract(address, _abi, signerOrProvider) as TestPostExecution;
  }
}
