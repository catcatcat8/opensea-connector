/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace FixedStaking {
  export type StakeStruct = {
    class: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    unstaked: PromiseOrValue<boolean>;
    initialAmount: PromiseOrValue<BigNumberish>;
    finalAmount: PromiseOrValue<BigNumberish>;
  };

  export type StakeStructOutput = [
    number,
    number,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    class: number;
    timestamp: number;
    unstaked: boolean;
    initialAmount: BigNumber;
    finalAmount: BigNumber;
  };
}

export interface FixedStakingInterface extends utils.Interface {
  functions: {
    "activeStakesCount(address)": FunctionFragment;
    "getStakes(address)": FunctionFragment;
    "increaseRewardPoolForClass(uint8,uint256)": FunctionFragment;
    "increaseRewardPools(uint256[])": FunctionFragment;
    "maxStakes()": FunctionFragment;
    "owner()": FunctionFragment;
    "periods(uint256)": FunctionFragment;
    "rates(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnAccidentallySent(address)": FunctionFragment;
    "rewardPools(uint256)": FunctionFragment;
    "stake(uint8,uint256)": FunctionFragment;
    "stakes(address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "updateMax(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeStakesCount"
      | "getStakes"
      | "increaseRewardPoolForClass"
      | "increaseRewardPools"
      | "maxStakes"
      | "owner"
      | "periods"
      | "rates"
      | "renounceOwnership"
      | "returnAccidentallySent"
      | "rewardPools"
      | "stake"
      | "stakes"
      | "token"
      | "transferOwnership"
      | "unstake"
      | "updateMax"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeStakesCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRewardPoolForClass",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseRewardPools",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "maxStakes", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periods",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnAccidentallySent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeStakesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseRewardPoolForClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseRewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAccidentallySent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateMax", data: BytesLike): Result;

  events: {
    "IncreaseRewardPoolForClass(address,uint256,uint8)": EventFragment;
    "IncreaseRewardPools(address,uint256)": EventFragment;
    "MaxStakesUpdated(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint8,uint256,uint256)": EventFragment;
    "Unstaked(address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncreaseRewardPoolForClass"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseRewardPools"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxStakesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface IncreaseRewardPoolForClassEventObject {
  adder: string;
  added: BigNumber;
  class: number;
}
export type IncreaseRewardPoolForClassEvent = TypedEvent<
  [string, BigNumber, number],
  IncreaseRewardPoolForClassEventObject
>;

export type IncreaseRewardPoolForClassEventFilter =
  TypedEventFilter<IncreaseRewardPoolForClassEvent>;

export interface IncreaseRewardPoolsEventObject {
  adder: string;
  added: BigNumber;
}
export type IncreaseRewardPoolsEvent = TypedEvent<
  [string, BigNumber],
  IncreaseRewardPoolsEventObject
>;

export type IncreaseRewardPoolsEventFilter =
  TypedEventFilter<IncreaseRewardPoolsEvent>;

export interface MaxStakesUpdatedEventObject {
  maxStakesBefore: BigNumber;
  maxStakesAfter: BigNumber;
}
export type MaxStakesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxStakesUpdatedEventObject
>;

export type MaxStakesUpdatedEventFilter =
  TypedEventFilter<MaxStakesUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakedEventObject {
  sender: string;
  class: number;
  amount: BigNumber;
  finalAmount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  sender: string;
  class: number;
  amount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, number, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface FixedStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeStakesCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakes(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        FixedStaking.StakeStructOutput[],
        FixedStaking.StakeStructOutput[],
        BigNumber[]
      ] & {
        all: FixedStaking.StakeStructOutput[];
        active: FixedStaking.StakeStructOutput[];
        activeIndexes: BigNumber[];
      }
    >;

    increaseRewardPoolForClass(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseRewardPools(
      amount_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnAccidentallySent(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean, BigNumber, BigNumber] & {
        class: number;
        timestamp: number;
        unstaked: boolean;
        initialAmount: BigNumber;
        finalAmount: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMax(
      max_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activeStakesCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakes(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      FixedStaking.StakeStructOutput[],
      FixedStaking.StakeStructOutput[],
      BigNumber[]
    ] & {
      all: FixedStaking.StakeStructOutput[];
      active: FixedStaking.StakeStructOutput[];
      activeIndexes: BigNumber[];
    }
  >;

  increaseRewardPoolForClass(
    class_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseRewardPools(
    amount_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxStakes(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periods(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  rates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnAccidentallySent(
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    class_: PromiseOrValue<BigNumberish>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, boolean, BigNumber, BigNumber] & {
      class: number;
      timestamp: number;
      unstaked: boolean;
      initialAmount: BigNumber;
      finalAmount: BigNumber;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMax(
    max_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeStakesCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakes(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        FixedStaking.StakeStructOutput[],
        FixedStaking.StakeStructOutput[],
        BigNumber[]
      ] & {
        all: FixedStaking.StakeStructOutput[];
        active: FixedStaking.StakeStructOutput[];
        activeIndexes: BigNumber[];
      }
    >;

    increaseRewardPoolForClass(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseRewardPools(
      amount_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    maxStakes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnAccidentallySent(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean, BigNumber, BigNumber] & {
        class: number;
        timestamp: number;
        unstaked: boolean;
        initialAmount: BigNumber;
        finalAmount: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMax(
      max_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IncreaseRewardPoolForClass(address,uint256,uint8)"(
      adder?: PromiseOrValue<string> | null,
      added?: PromiseOrValue<BigNumberish> | null,
      _class?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRewardPoolForClassEventFilter;
    IncreaseRewardPoolForClass(
      adder?: PromiseOrValue<string> | null,
      added?: PromiseOrValue<BigNumberish> | null,
      _class?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRewardPoolForClassEventFilter;

    "IncreaseRewardPools(address,uint256)"(
      adder?: PromiseOrValue<string> | null,
      added?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRewardPoolsEventFilter;
    IncreaseRewardPools(
      adder?: PromiseOrValue<string> | null,
      added?: PromiseOrValue<BigNumberish> | null
    ): IncreaseRewardPoolsEventFilter;

    "MaxStakesUpdated(uint256,uint256)"(
      maxStakesBefore?: null,
      maxStakesAfter?: null
    ): MaxStakesUpdatedEventFilter;
    MaxStakesUpdated(
      maxStakesBefore?: null,
      maxStakesAfter?: null
    ): MaxStakesUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint8,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      _class?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      finalAmount?: null
    ): StakedEventFilter;
    Staked(
      sender?: PromiseOrValue<string> | null,
      _class?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      finalAmount?: null
    ): StakedEventFilter;

    "Unstaked(address,uint8,uint256)"(
      sender?: PromiseOrValue<string> | null,
      _class?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): UnstakedEventFilter;
    Unstaked(
      sender?: PromiseOrValue<string> | null,
      _class?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    activeStakesCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakes(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseRewardPoolForClass(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseRewardPools(
      amount_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxStakes(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnAccidentallySent(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMax(
      max_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeStakesCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakes(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseRewardPoolForClass(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseRewardPools(
      amount_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnAccidentallySent(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      class_: PromiseOrValue<BigNumberish>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMax(
      max_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
