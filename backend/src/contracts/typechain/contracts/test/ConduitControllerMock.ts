/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ConduitControllerMockInterface extends utils.Interface {
  functions: {
    "acceptOwnership(address)": FunctionFragment;
    "cancelOwnershipTransfer(address)": FunctionFragment;
    "createConduit(bytes32,address)": FunctionFragment;
    "getChannel(address,uint256)": FunctionFragment;
    "getChannelStatus(address,address)": FunctionFragment;
    "getChannels(address)": FunctionFragment;
    "getConduit(bytes32)": FunctionFragment;
    "getConduitCodeHashes()": FunctionFragment;
    "getKey(address)": FunctionFragment;
    "getPotentialOwner(address)": FunctionFragment;
    "getTotalChannels(address)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "transferOwnership(address,address)": FunctionFragment;
    "updateChannel(address,address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "cancelOwnershipTransfer"
      | "createConduit"
      | "getChannel"
      | "getChannelStatus"
      | "getChannels"
      | "getConduit"
      | "getConduitCodeHashes"
      | "getKey"
      | "getPotentialOwner"
      | "getTotalChannels"
      | "ownerOf"
      | "transferOwnership"
      | "updateChannel"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createConduit",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannel",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConduit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConduitCodeHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChannels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createConduit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChannel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChannelStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConduit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConduitCodeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChannel",
    data: BytesLike
  ): Result;

  events: {
    "NewConduit(address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address,address)": EventFragment;
    "PotentialOwnerUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewConduit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialOwnerUpdated"): EventFragment;
}

export interface NewConduitEventObject {
  conduit: string;
  conduitKey: string;
}
export type NewConduitEvent = TypedEvent<
  [string, string],
  NewConduitEventObject
>;

export type NewConduitEventFilter = TypedEventFilter<NewConduitEvent>;

export interface OwnershipTransferredEventObject {
  conduit: string;
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PotentialOwnerUpdatedEventObject {
  newPotentialOwner: string;
}
export type PotentialOwnerUpdatedEvent = TypedEvent<
  [string],
  PotentialOwnerUpdatedEventObject
>;

export type PotentialOwnerUpdatedEventFilter =
  TypedEventFilter<PotentialOwnerUpdatedEvent>;

export interface ConduitControllerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConduitControllerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { channel: string }>;

    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOpen: boolean }>;

    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { channels: string[] }>;

    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
    >;

    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { conduitKey: string }>;

    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { potentialOwner: string }>;

    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalChannels: BigNumber }>;

    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    conduit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipTransfer(
    conduit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createConduit(
    conduitKey: PromiseOrValue<BytesLike>,
    initialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChannel(
    conduit: PromiseOrValue<string>,
    channelIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChannelStatus(
    conduit: PromiseOrValue<string>,
    channel: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getChannels(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getConduit(
    conduitKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

  getConduitCodeHashes(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
  >;

  getKey(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPotentialOwner(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalChannels(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOf(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    conduit: PromiseOrValue<string>,
    newPotentialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChannel(
    conduit: PromiseOrValue<string>,
    channel: PromiseOrValue<string>,
    isOpen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
    >;

    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewConduit(address,bytes32)"(
      conduit?: null,
      conduitKey?: null
    ): NewConduitEventFilter;
    NewConduit(conduit?: null, conduitKey?: null): NewConduitEventFilter;

    "OwnershipTransferred(address,address,address)"(
      conduit?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      conduit?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PotentialOwnerUpdated(address)"(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;
    PotentialOwnerUpdated(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConduitCodeHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
